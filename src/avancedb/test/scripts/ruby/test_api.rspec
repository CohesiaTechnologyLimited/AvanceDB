# Simple ruby api tests for rspec to be extended over time to cover AvanceDB functionality
# 
# Copyright (c) Simon Stearn, 2015

# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the 
# Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the 
# Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION 
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

require 'airborne'
require 'faker'
require 'json'

DB="ruby_tests"
HOST="127.0.0.1"
PORT="15995"
docs=[]

Airborne.configure do |config|
  config.base_url = 'http://' + HOST + ':' + PORT
end

1000.times { | i |
  docs[i] = {
    :id => i.to_s,
    :first_name => Faker::Name.first_name,
    :last_name => Faker::Name.last_name,
    :company_name => Faker::Company.name,
    :catch_phrase => Faker::Company.catch_phrase,
    :BS => Faker::Company.bs,
    :phone_number => Faker::PhoneNumber.phone_number,
    :email => Faker::Internet.email,
    :ip_v4_address => Faker::Internet.ip_v4_address,
    :ip_v6_address => Faker::Internet.ip_v6_address 
  }
}

bulk_docs = { :docs => docs }.to_json

describe 'couch DB API spec' do

  it 'should return the signature' do
    get '/'
    expect_status 200
    expect_json_types(couchdb: :string)
  end

  it 'should return futon' do
    get '/_utils/index.html'
    expect_status 200
  end

  # Other futon tests...

  it 'should have a database' do
    delete '/' + DB
    put '/' + DB
    expect_status 201
  end

  # Generic doc wrangling tests
  it 'should be possible to create a document' do
    put '/'+ DB + '/' + "desdemona" , { :name => "Desdemona", :occupation => "street urchin", :age => 8}
    expect_status 201
    expect_json(id: "desdemona")
    expect_json(ok: true)
    expect_json_types(rev: :string)
  end

  it 'should be possible to find the document' do
    get '/'+ DB + '/' + "desdemona" 
    expect_json_types(_id: :string, name:  :string , occupation: :string, age: :integer)
    expect_json(_id: "desdemona",  name:  "Desdemona", occupation: "street urchin", age: 8)
    expect_status 200
  end

  # Hammer doc load
  it 'should be possible to load a bunch of docs' do
    docs.each {  |doc|
      put '/'+ DB + '/' + doc[:id].to_s , doc.to_json
      expect_status 201
      expect_json(id: doc[:id])
      expect_json(ok: true)
      expect_json_types(rev: :string)
    }
  end

  # Hammer doc find
  it 'should be possible to find a bunch of docs' do
    docs.each {  |doc|
      get '/' + DB + '/' + doc[:id]
      expect_status 200
      expect_json(doc)
    }
  end

  # Yes these should all be torn down and recreated for every test...
  it 'should have a fresh database' do
    delete '/' + DB
    put '/' + DB
    expect_status 201
  end

  # Bulk load docs
  it 'should be possible to bulk load docs' do
    post '/' + DB + '/_bulk_docs', bulk_docs
    expect_status 201
    get '/' + DB
    expect_status 200
    expect_json(doc_count: docs.length)
  end

end
